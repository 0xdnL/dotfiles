# vim: set filetype=sh :

eval "$(/opt/homebrew/bin/brew shellenv)"
[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"


#if [ -z "${TMUX}" ];
#  echo "not sourcing .bashrc"
#  return;     # don't source again when starting tmux session
#fi

[ -f ~/.fzf.bash ]   && source ~/.fzf.bash
[ -f ~/.bash_alias ] && source ~/.bash_alias
[ -f ~/.bash_func ]  && source ~/.bash_func

bind '"\302\240":" "' # replace "NBSP" U+00A0 with normal space (https://superuser.com/a/1647926/1236589)

{
  shopt -s histappend              # close a session history will appended rather than overwritten
  shopt -s cmdhist                 # force commands entered on more than one line to be adjusted to fit on only one for parsing
  export HISTSIZE=
  export HISTFILESIZE=
  export HISTIGNORE='ls:ll:ls -alh:pwd:clear:history'
  export HISTCONTROL='ignoredups'
}

{
  # git prompt see: $(brew --prefix)/etc/bash_completion.d/git
  export GIT_PS1_SHOWDIRTYSTATE=true      # staged '+', unstaged '*'
  export GIT_PS1_SHOWUNTRACKEDFILES=true  # '%' untracked files
  export GIT_PS1_SHOWUPSTREAM="auto"      # '<' behind, '>' ahead, '<>' diverged, '=' no difference
  export GIT_PS1_SHOWSTASHSTATE=true      # '$' something is stashed
  export GIT_PS1_SHOWCOLORHINTS=true
  # export GIT_CONFIG="$HOME/.gitconfig"   # does nothing but cause problems when set, kube plugin, git confgi list ...
}

{
  export PS1='$(__aws_ps1)\A \w$(__git_ps1 \(%s\)) \$ '
  export PS2='> ' # used in multiline commands
  export PS4='+ ${BASH_SOURCE##*/}.${LINENO} ${FUNCNAME}: '
  export PROMPT_DIRTRIM=2
  export PROMPT_COMMAND="flip_table; history -a; history -n;"
}

complete -C '/usr/local/bin/aws_completer' aws
complete -C '/opt/homebrew/bin/terraform' terraform
complete -C '/opt/homebrew/bin/terraform' terragrunt # https://github.com/gruntwork-io/terragrunt/issues/689

{
  export SSH_AUTH_SOCK="$HOME/Library/Containers/com.maxgoedjen.Secretive.SecretAgent/Data/socket.ssh"  # Secretive Config
  #export GPG_TTY=$(tty)
  #[ -f ~/.gnupg/gpg-agent-info ] && source ~/.gnupg/gpg-agent-info
  #if [ -S "${GPG_AGENT_INFO%%:*}" ]; then
  #    export GPG_AGENT_INFO
  #else
  #    eval $( gpg-agent --daemon --options ~/.gnupg/gpg-agent.conf --write-env-file ~/.gnupg/gpg-agent-info )
  #fi

  # https://github.com/pstadler/keybase-gpg-github/issues/26
  if test -n "$(pgrep gpg-agent)"; then
      # TODO: where does this 1489:1 come from?
      export GPG_AGENT_INFO=~/.gnupg/S.gpg-agent:1489:1
      GPG_TTY=$(tty)
      export GPG_TTY
  else
      echo "Starting gpg-agent daemon"
      eval $(gpg-agent --daemon)
  fi
}

{ # golang
  export GOPATH="$HOME/go"
  export PATH="$GOPATH/bin:$PATH"
}

{ # rust
  source "$HOME/.cargo/env"
}

{ # node
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

export PATH="$HOME/.krew/bin:$PATH"
export PATH="$HOME/.rd/bin:$PATH"
export PATH="$HOME/.pgenv/bin:$HOME/.pgenv/pgsql/bin:$PATH"

export PATH="/opt/homebrew/opt/curl/bin:$PATH"
export PATH="/opt/homebrew/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

{
  export PATH="/opt/homebrew/opt/sqlite/bin:$PATH"
  # # For compilers to find sqlite you may need to set:
  # export LDFLAGS="-L/opt/homebrew/opt/sqlite/lib"
  # export CPPFLAGS="-I/opt/homebrew/opt/sqlite/include"
  # # For pkg-config to find sqlite you may need to set:
  # export PKG_CONFIG_PATH="/opt/homebrew/opt/sqlite/lib/pkgconfig"
}

{
  export PATH="/opt/homebrew/opt/postgresql@15/bin:$PATH"
  # # For compilers to find postgresql@15 you may need to set:
  # export LDFLAGS="-L/opt/homebrew/opt/postgresql@15/lib"
  # export CPPFLAGS="-I/opt/homebrew/opt/postgresql@15/include"

  # # For pkg-config to find postgresql@15 you may need to set:
  # export PKG_CONFIG_PATH="/opt/homebrew/opt/postgresql@15/lib/pkgconfig"
  # # To start postgresql@15 now and restart at login:
  # brew services start postgresql@15
  # # Or, if you don't want/need a background service you can just run:
  # LC_ALL="C" /opt/homebrew/opt/postgresql@15/bin/postgres -D /opt/homebrew/var/postgresql@15
}
